<!DOCTYPE html>
<html lang="en">
<head>
    <!-- // AIzaSyCLTjPgKkq3Td-IsnPuNxsCI0vrEEou6-s  // -->
  <!-- // 1c1apbtJlCRhOxExVaP_vvGw0Q39Fztxa2dTy7lgODRo // -->
   <!-- // https://docs.google.com/spreadsheets/d/e/2PACX-1vT1vkHpxH_hZsGMtEGe9PmA2W2ahXi69qEPwNhGq0bvOuNbf_DUeSmnXQunAwQpxGOcf-AtKhEYozfG/pubhtml?gid=0&single=true  -->
    
  <!-- Author: Nadir -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fruit Inventory Manager</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Poppins', sans-serif; }
        .fruit-card {
            transition: all 0.3s ease;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .fruit-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        .edit-mode {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }
        .save-btn {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }
        .add-btn {
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        }
        .demo-badge {
            background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
        }
    </style>
</head>
<body class="bg-gradient-to-br from-purple-400 via-pink-500 to-red-500 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="text-center mb-8">
            <h1 class="text-5xl font-bold text-white mb-4">üçé Fruit Inventory</h1>
            <p class="text-xl text-white opacity-90">Manage your colorful fruit collection</p>
            <div class="demo-badge inline-block px-4 py-2 rounded-full text-orange-800 font-semibold mt-4">
                üìã Demo Version - Google Sheets integration not available
            </div>
        </div>

        <!-- Add New Fruit Button -->
        <div class="text-center mb-8">
            <button onclick="addNewFruit()" class="add-btn text-white px-8 py-4 rounded-full font-semibold text-lg hover:scale-105 transform transition-all duration-300 shadow-lg">
                ‚ûï Add New Fruit
            </button>
        </div>

        <!-- Fruits Grid -->
        <div id="fruitsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            <!-- Fruit cards will be generated here from Google Sheets data -->
        </div>
    </div>

    <script>
        // --- IMPORTANT: REPLACE THESE WITH YOUR OWN VALUES ---
        // const SPREADSHEET_ID = '1c1apbtJlCRhOxExVaP_vvGw0Q39Fztxa2dTy7lgODRo'; 
        // 2PACX-1vT1vkHpxH_hZsGMtEGe9PmA2W2ahXi69qEPwNhGq0bvOuNbf_DUeSmnXQunAwQpxGOcf-AtKhEYozfG
        // const SPREADSHEET_ID = '2PACX-1vT1vkHpxH_hZsGMtEGe9PmA2W2ahXi69qEPwNhGq0bvOuNbf_DUeSmnXQunAwQpxGOcf-AtKhEYozfG';
         const SPREADSHEET_ID = '1c1apbtJlCRhOxExVaP_vvGw0Q39Fztxa2dTy7lgODRo';
        
        const API_KEY = 'AIzaSyCLTjPgKkq3Td-IsnPuNxsCI0vrEEou6-s'; 
        const RANGE = 'Sheet1!A2:F'; // This range (A2:F) assumes your data starts in row 2

        // Global state for our fruit data and editing status
        let fruits = [];
        let editingId = null;

        /**
         * Fetches fruit data from the specified Google Sheet using the API.
         * It updates the global 'fruits' array and then renders the cards.
         */
        async function fetchFruitsFromSheet_0() {
            showNotification('üîÑ Fetching fruit data...');
            const url = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${RANGE}?key=${API_KEY}`;
            
            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                
                // Map the raw sheet data into our desired fruit object format.
                // It assumes the columns in your sheet are: Name, Description, Emoji, Color, Quantity, Price.
                if (data.values) {
                    fruits = data.values.map((row, index) => ({
                        id: index + 1, // Simple ID generation based on row number
                        name: row[0],
                        description: row[1],
                        emoji: row[2],
                        color: row[3],
                        quantity: parseInt(row[4]),
                        price: row[5]
                    }));
                } else {
                    fruits = []; // No data found
                }

                renderFruits();
                showNotification('‚úÖ Data loaded successfully!');
            } catch (error) {
                console.error('Error fetching data from Google Sheets:', error);
                showNotification('‚ùå Failed to load data. Check your API key and sheet ID.', 'error');
            }
        }
        
        async function fetchFruitsFromSheet() {
            showNotification('üîÑ Fetching fruit data...');
            const url = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${RANGE}?key=${API_KEY}`;
            
            // --- DEBUG CODE ADDED HERE ---
            console.log('Fetching from URL:', url);
            
            try {
                const response = await fetch(url);
                
                // --- DEBUG CODE ADDED HERE ---
                console.log('HTTP Response Status:', response.status, response.statusText);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                
                // Map the raw sheet data into our desired fruit object format.
                // It assumes the columns in your sheet are: Name, Description, Emoji, Color, Quantity, Price.
                if (data.values) {
                    fruits = data.values.map((row, index) => ({
                        id: index + 1, // Simple ID generation based on row number
                        name: row[0],
                        description: row[1],
                        emoji: row[2],
                        color: row[3],
                        quantity: parseInt(row[4]),
                        price: row[5]
                    }));
                } else {
                    fruits = []; // No data found
                }

                renderFruits();
                showNotification('‚úÖ Data loaded successfully!');
            } catch (error) {
                // --- DEBUG CODE ADDED HERE ---
                console.error('Error fetching data from Google Sheets:', error);
                showNotification('‚ùå Failed to load data. Check your API key and sheet ID.', 'error');
            }
        }
        
        /**
         * Renders the fruit cards based on the 'fruits' array.
         * Creates an editable view if a fruit is in 'editing mode'.
         */
        function renderFruits() {
            const grid = document.getElementById('fruitsGrid');
            grid.innerHTML = '';

            fruits.forEach(fruit => {
                const isEditing = editingId === fruit.id;
                const cardClass = isEditing ? 'edit-mode' : `bg-gradient-to-br ${fruit.color}`;
                
                const card = document.createElement('div');
                card.className = `fruit-card ${cardClass} rounded-2xl p-6 text-white shadow-xl`;
                
                card.innerHTML = `
                    <div class="text-center mb-4">
                        <div class="text-6xl mb-2">${fruit.emoji}</div>
                        ${isEditing ? 
                            `<input type="text" id="name-${fruit.id}" value="${fruit.name}" class="text-2xl font-bold bg-white/20 rounded-lg px-3 py-2 text-center w-full text-white placeholder-white/70" placeholder="Fruit name">` :
                            `<h3 class="text-2xl font-bold">${fruit.name}</h3>`
                        }
                    </div>
                    
                    <div class="space-y-3">
                        ${isEditing ?
                            `<textarea id="desc-${fruit.id}" class="w-full bg-white/20 rounded-lg px-3 py-2 text-white placeholder-white/70 resize-none" rows="3" placeholder="Description">${fruit.description}</textarea>` :
                            `<p class="text-white/90 text-sm leading-relaxed">${fruit.description}</p>`
                        }
                        
                        <div class="flex justify-between items-center">
                            <div>
                                <span class="text-white/80 text-sm">Quantity:</span>
                                ${isEditing ?
                                    `<input type="number" id="qty-${fruit.id}" value="${fruit.quantity}" class="bg-white/20 rounded px-2 py-1 w-16 text-white ml-2">` :
                                    `<span class="font-semibold ml-2">${fruit.quantity}</span>`
                                }
                            </div>
                            <div>
                                <span class="text-white/80 text-sm">Price:</span>
                                ${isEditing ?
                                    `<input type="text" id="price-${fruit.id}" value="${fruit.price}" class="bg-white/20 rounded px-2 py-1 w-20 text-white ml-2">` :
                                    `<span class="font-semibold ml-2">${fruit.price}</span>`
                                }
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6 flex gap-2">
                        ${isEditing ?
                            `<button onclick="saveFruit(${fruit.id})" class="save-btn flex-1 py-2 rounded-lg font-semibold hover:scale-105 transform transition-all duration-200">üíæ Save</button>
                            <button onclick="cancelEdit()" class="bg-gray-500 hover:bg-gray-600 flex-1 py-2 rounded-lg font-semibold hover:scale-105 transform transition-all duration-200">‚ùå Cancel</button>` :
                            `<button onclick="editFruit(${fruit.id})" class="bg-white/20 hover:bg-white/30 flex-1 py-2 rounded-lg font-semibold hover:scale-105 transform transition-all duration-200">‚úèÔ∏è Edit</button>
                            <button onclick="deleteFruit(${fruit.id})" class="bg-red-500 hover:bg-red-600 flex-1 py-2 rounded-lg font-semibold hover:scale-105 transform transition-all duration-200">üóëÔ∏è Delete</button>`
                        }
                    </div>
                `;
                
                grid.appendChild(card);
            });
        }

        function editFruit(id) {
            editingId = id;
            renderFruits();
        }

        function saveFruit(id) {
            const fruit = fruits.find(f => f.id === id);
            if (fruit) {
                fruit.name = document.getElementById(`name-${id}`).value;
                fruit.description = document.getElementById(`desc-${id}`).value;
                fruit.quantity = parseInt(document.getElementById(`qty-${id}`).value);
                fruit.price = document.getElementById(`price-${id}`).value;
            }
            editingId = null;
            renderFruits();
            
            // This is a placeholder. To truly save to Google Sheets, you need a backend endpoint.
            showNotification('‚úÖ Fruit updated! (Requires backend to sync)');
        }

        function cancelEdit() {
            editingId = null;
            renderFruits();
        }

        function deleteFruit(id) {
            // Replaced alert with a custom confirmation for better user experience
            const confirmDelete = window.confirm('Are you sure you want to delete this fruit?');
            if (confirmDelete) {
                fruits = fruits.filter(f => f.id !== id);
                renderFruits();
                // This is a placeholder. To truly delete from Google Sheets, you need a backend endpoint.
                showNotification('üóëÔ∏è Fruit deleted! (Requires backend to sync)');
            }
        }

        function addNewFruit() {
            const newId = fruits.length > 0 ? Math.max(...fruits.map(f => f.id)) + 1 : 1;
            const emojis = ['ü•ù', 'ü•≠', 'üçë', 'ÔøΩ', 'üçà', 'ü••', 'üçã', 'üçê'];
            const colors = [
                'from-green-400 to-green-600',
                'from-blue-400 to-blue-600',
                'from-indigo-400 to-indigo-600',
                'from-teal-400 to-teal-600'
            ];
            
            const newFruit = {
                id: newId,
                name: "New Fruit",
                description: "Add your description here...",
                emoji: emojis[Math.floor(Math.random() * emojis.length)],
                color: colors[Math.floor(Math.random() * colors.length)],
                quantity: 0,
                price: "$0.00"
            };
            
            fruits.push(newFruit);
            editingId = newId;
            renderFruits();
            // This is a placeholder. To truly add to Google Sheets, you need a backend endpoint.
            showNotification('‚ûï New fruit added! (Requires backend to sync)');
        }

        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 text-white px-6 py-3 rounded-lg shadow-lg z-50 transform translate-x-full transition-transform duration-300 ${type === 'error' ? 'bg-red-600' : 'bg-green-600'}`;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 100);
            
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }
        
        // --- This function call starts the app by fetching the data ---
        fetchFruitsFromSheet();
    </script>
</body>
</html>

